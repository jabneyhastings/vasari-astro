---
import { Image } from "astro:assets";

export interface Props {
  src: string; // e.g. "/uploads/example.jpg"
  alt: string;
  width?: number;
  height?: number;
  sizes?: string;
  loading?: "lazy" | "eager";
  class?: string;
}

const {
  src,
  alt,
  width = 1200,
  height = 800,
  sizes = "100vw",
  loading = "lazy",
  class: className
} = Astro.props;

// Default: no image yet
let imageImport: any = null;
let optimized = false;

const baseUrl = import.meta.env.BASE_URL.endsWith('/') ? import.meta.env.BASE_URL : `${import.meta.env.BASE_URL}/`;
const cleanSrc = src.startsWith('/') ? src.slice(1) : src;
const fallbackSrc = `${baseUrl}${cleanSrc}`;

try {
  const fileName = src.split("/").pop();
  imageImport = await import(/* @vite-ignore */ `../assets/uploads/${fileName}`);
  optimized = true;
} catch (err) {
  console.warn(
    `[CmsImage] Could not optimize "${src}". Falling back to <img>. Reason:`,
    err?.message ?? err
  );
}
---

{optimized && imageImport ? (
  <Image
    src={imageImport.default}
    alt={alt}
    width={width}
    height={height}
    sizes={sizes}
    loading={loading}
    class={className}
  />
) : (
  <img
    src={fallbackSrc}
    alt={alt}
    width={width}
    height={height}
    sizes={sizes}
    loading={loading}
    class={className}
  />
)}
