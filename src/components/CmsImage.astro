---
import { Image } from "astro:assets";

const images = import.meta.glob('../assets/uploads/*', { eager: true });

export interface Props {
  src: string; // e.g. "/uploads/example.jpg"
  alt: string;
  width?: number;
  height?: number;
  sizes?: string;
  loading?: "lazy" | "eager";
  class?: string;
}

const {
  src,
  alt,
  width = 1200,
  height = 800,
  sizes = "100vw",
  loading = "lazy",
  class: className
} = Astro.props;

  const baseUrl = import.meta.env.BASE_URL.endsWith('/') ? import.meta.env.BASE_URL : `${import.meta.env.BASE_URL}/`;
  const cleanSrc = src.startsWith('/') ? src.slice(1) : src;
  const fallbackSrc = `${baseUrl}${cleanSrc}`;

  let imageImport: any = null;
  let optimized = false;

  const fileName = src.split("/").pop();
  const imagePath = `../assets/uploads/${fileName}`;

  console.log('üîç Looking for:', imagePath);
  console.log('üìÅ Available images:', Object.keys(images));

  if (images[imagePath]) {
    imageImport = images[imagePath];
    optimized = true;
    console.log('‚úÖ Found optimized image');
  } else {
    console.log('‚ùå Image not found in assets, using fallback');
  }
---

{optimized && imageImport ? (
  <Image
    src={imageImport.default}
    alt={alt}
    width={width}
    height={height}
    sizes={sizes}
    loading={loading}
    class={className}
  />
) : (
  <img
    src={fallbackSrc}
    alt={alt}
    width={width}
    height={height}
    sizes={sizes}
    loading={loading}
    class={className}
  />
)}
