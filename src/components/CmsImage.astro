---
export interface Props {
  src: string;
  alt: string;
  width?: number;                       // desired base width for transforms
  height?: number;                      // optional height (keeps aspect ratio)
  loading?: 'lazy' | 'eager';
  class?: string;
  sizes?: string;
  testNetlify?: boolean;                // dev override to test Netlify transforms locally
}

const rawProps = Astro.props as Record<string, any>;
const {
  src,
  alt,
  width = 800,
  height,
  loading = 'lazy',
  class: className,
  sizes = "(max-width: 640px) 100vw, (max-width: 1024px) 80vw, 60vw",
  testNetlify = false
} = Astro.props as Props;

// Use Netlify transforms in production, or when manually overriding in dev
const useNetlifyTransforms = (!import.meta.env.DEV) || Boolean(testNetlify);

/**
 * Build a Netlify image transform URL.
 * Note: for local dev this returns the source unchanged unless testNetlify=true.
 */
const createNetlifyUrl = (w: number, h?: number): string => {
  if (!useNetlifyTransforms) return src;

  const params = new URLSearchParams({
    url: src,
    f: 'auto',    // choose best format (webp/avif) automatically
    q: '80',
    w: String(Math.round(w)),
    // optional: h and fit only included if height was provided
    ...(h ? { h: String(Math.round(h)), fit: 'cover' } : {})
  });

  return '/.netlify/images?' + params.toString();
};

/**
 * Build a reasonable set of widths for srcset.
 * We keep it small and unique (0.5x, 1x, 1.5x) to avoid creating dozens of variants.
 */
const widths = Array.from(new Set([
  Math.max(1, Math.round(width * 0.5)),
  Math.max(1, Math.round(width)),
  Math.max(1, Math.round(width * 1.5)),
]));

// If using Netlify transforms, build the srcset string; otherwise undefined
const srcset = useNetlifyTransforms
  ? widths.map((w) => `${createNetlifyUrl(w, height)} ${w}w`).join(', ')
  : undefined;

// Only emit width/height attributes if the caller explicitly passed them
const hasExplicitWidth = rawProps.width !== undefined;
const hasExplicitHeight = rawProps.height !== undefined;

// If both width and height were passed, set an inline aspect-ratio style to avoid layout shift
const aspectStyle = (hasExplicitWidth && hasExplicitHeight)
  ? `aspect-ratio: ${Math.round(width)}/${Math.round(height as number)};`
  : undefined;
---

<img
  src={useNetlifyTransforms ? createNetlifyUrl(width, height) : src}
  srcset={srcset}
  sizes={useNetlifyTransforms ? sizes : undefined}
  alt={alt}
  loading={loading}
  class={className}
  width={hasExplicitWidth ? width : undefined}
  height={hasExplicitHeight ? height : undefined}
  style={aspectStyle}
/>
