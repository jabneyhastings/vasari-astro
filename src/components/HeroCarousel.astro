---
import CmsImage from '../components/CmsImage.astro';

interface Slide {
  image: string;
  alt: string;
}

interface Props {
  slides: Slide[];
  autoAdvanceDelay?: number;
}

const { slides, autoAdvanceDelay = 5000 } = Astro.props;
---

<section class="carousel header__spacer" aria-label="Hero carousel">
  <div class="carousel__slides">
    {slides.map((slide, index) => (
      <div 
        class={`carousel__slide ${index === 0 ? 'carousel__slide--active' : ''}`}
        aria-hidden={index !== 0}
      >
        <div class="carousel__image-container">
          <CmsImage 
            src={slide.image}
            alt={slide.alt}
            width={2400}
            height={1350}
            loading={index === 0 ? 'eager' : 'lazy'}
            class="carousel__image"
            sizes="100vw"
          />
        </div>
      </div>
    ))}
  </div>
</section>

<script define:vars={{ autoAdvanceDelay }}>
(function () {
    // Map<HTMLElement, HeroCarousel>
    const instances = new Map();

    class HeroCarousel {
        constructor(root) {
            this.root = root;
            this.slides = Array.from(root.querySelectorAll('.carousel__slide'));
            this.currentSlide = 0;
            this.autoAdvanceTimer = null;

            // bound handlers so we can remove them later
            this.onTouchStart = this.onTouchStart.bind(this);
            this.onTouchEnd = this.onTouchEnd.bind(this);
            this.onFocusIn = this.onFocusIn.bind(this);
            this.onFocusOut = this.onFocusOut.bind(this);

            this.startX = 0;
            this.startY = 0;

            if (this.slides.length <= 1) return;

            this.init();
        }

        init() {
            instances.set(this.root, this);

            // Event delegation: single handlers attached to the root
            this.root.addEventListener('touchstart', this.onTouchStart, { passive: true });
            this.root.addEventListener('touchend', this.onTouchEnd, { passive: true });
            this.root.addEventListener('focusin', this.onFocusIn);
            this.root.addEventListener('focusout', this.onFocusOut);

            // ensure proper starting ARIA state
            this.slides.forEach((s, i) => {
                s.setAttribute('aria-hidden', i === 0 ? 'false' : 'true');
            });

            this.startAutoAdvance();
        }

        onTouchStart(e) {
            this.startX = e.touches[0].clientX;
            this.startY = e.touches[0].clientY;
        }

        onTouchEnd(e) {
            const endX = e.changedTouches[0].clientX;
            const endY = e.changedTouches[0].clientY;
            const diffX = this.startX - endX;
            const diffY = this.startY - endY;

            if (Math.abs(diffX) > Math.abs(diffY) && Math.abs(diffX) > 50) {
                diffX > 0 ? this.nextSlide() : this.prevSlide();
            }
        }

        onFocusIn() {
            this.pauseAutoAdvance();
        }

        onFocusOut() {
            this.resumeAutoAdvance();
        }

        goToSlide(index) {
            if (index === this.currentSlide) return;

            const prevSlide = this.slides[this.currentSlide];
            prevSlide?.classList.remove('carousel__slide--active');
            prevSlide?.setAttribute('aria-hidden', 'true');

            this.currentSlide = index;

            const curSlide = this.slides[this.currentSlide];
            curSlide?.classList.add('carousel__slide--active');
            curSlide?.setAttribute('aria-hidden', 'false');

            this.resetAutoAdvance();
        }

        nextSlide() {
            const nextIndex = (this.currentSlide + 1) % this.slides.length;
            this.goToSlide(nextIndex);
        }

        prevSlide() {
            const prevIndex = this.currentSlide === 0 ? this.slides.length - 1 : this.currentSlide - 1;
            this.goToSlide(prevIndex);
        }

        startAutoAdvance() {
            this.clearTimers();
            this.autoAdvanceTimer = setTimeout(() => {
                this.nextSlide();
                this.startAutoAdvance();
            }, autoAdvanceDelay);
        }

        pauseAutoAdvance() {
            this.clearTimers();
        }

        resumeAutoAdvance() {
            this.startAutoAdvance();
        }

        resetAutoAdvance() {
            this.startAutoAdvance();
        }

        clearTimers() {
            clearTimeout(this.autoAdvanceTimer);
            this.autoAdvanceTimer = null;
        }

        destroy() {
            this.clearTimers();
            this.root.removeEventListener('touchstart', this.onTouchStart, { passive: true });
            this.root.removeEventListener('touchend', this.onTouchEnd, { passive: true });
            this.root.removeEventListener('focusin', this.onFocusIn);
            this.root.removeEventListener('focusout', this.onFocusOut);

            instances.delete(this.root);
        }
    }

    // Initialize any carousels in the document that don't already have instances
    function initCarousel() {
        document.querySelectorAll('.carousel').forEach((el) => {
            if (!instances.has(el)) {
                new HeroCarousel(el);
            }
        });
    }

    // Destroy all active instances (called before a view transition swap)
    function destroyAllInstances() {
        // iterate over a copy of the values to avoid mutation while iterating
        Array.from(instances.values()).forEach((inst) => {
            inst.destroy();
        });
    }

    // initial load
    if (document.readyState === 'loading') {
        document.addEventListener('DOMContentLoaded', initCarousel);
    } else {
        initCarousel();
    }

    // Clean up before Astro swaps the DOM
    document.addEventListener('astro:before-swap', () => {
        destroyAllInstances();
    });

    // Re-init after Astro has swapped the DOM
    document.addEventListener('astro:after-swap', () => {
        // small delay so DOM is stable; adjust if you need it immediate
        setTimeout(initCarousel, 30);
    });
})();
</script>

<style>
  .carousel {
    position: relative;
    height: 100svh;
    overflow: hidden;
  }

  .carousel__slides {
    position: relative;
    width: 100%;
    height: 100%;
  }

  .carousel__slide {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    opacity: 0;
    transition: opacity 0.8s cubic-bezier(0.4, 0, 0.2, 1);
  }

  .carousel__slide--active {
    opacity: 1;
  }

  .carousel__image-container {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
  }

  :global(.carousel__image) {
    width: 100%;
    height: 100%;
    object-fit: cover;
    object-position: center;
    display: block;
  }

  /* Reduced motion support */
  @media (prefers-reduced-motion: reduce) {
    .carousel__slide {
      transition-duration: 0.3s;
    }
  }
</style>