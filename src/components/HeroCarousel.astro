---
import CmsImage from '../components/CmsImage.astro';

interface Slide {
  image: string;
  alt: string;
}

interface Props {
  slides: Slide[];
  autoAdvanceDelay?: number;
}

const { slides, autoAdvanceDelay = 5000 } = Astro.props;
---

<section class="carousel" aria-label="Hero carousel">
  <div class="carousel__slides">
    {slides.map((slide, index) => (
      <div 
        class={`carousel__slide ${index === 0 ? 'carousel__slide--active' : ''}`}
        aria-hidden={index !== 0}
      >
        <div class="carousel__image-container">
          <CmsImage 
            src={slide.image}
            alt={slide.alt}
            width={2400}
            height={1350}
            loading={index === 0 ? 'eager' : 'lazy'}
            class="carousel__image"
            sizes="100vw"
          />
        </div>
      </div>
    ))}
  </div>
  
  {slides.length > 1 && (
    <div class="carousel__controls">
      <div class="carousel__dots" role="tablist" aria-label="Carousel navigation">
        {slides.map((slide, index) => (
          <button 
            class={`carousel__dot ${index === 0 ? 'carousel__dot--active' : ''}`}
            role="tab"
            aria-selected={index === 0}
            aria-label={`Go to slide ${index + 1}: ${slide.alt}`}
            data-slide={index}
          />
        ))}
      </div>
    </div>
  )}
</section>

<script define:vars={{ autoAdvanceDelay }}>
  class HeroCarousel {
    constructor() {
      this.currentSlide = 0;
      this.slides = document.querySelectorAll('.carousel__slide');
      this.dots = document.querySelectorAll('.carousel__dot');
      this.autoAdvanceTimer = null;
      
      if (this.slides.length <= 1) return;

      this.init();
    }

    init() {
      this.bindEvents();
      this.startAutoAdvance();

      // Accessibility: pause while focused
      const carousel = document.querySelector('.carousel');
      carousel?.addEventListener('focusin', () => this.pauseAutoAdvance());
      carousel?.addEventListener('focusout', () => this.resumeAutoAdvance());
    }

    bindEvents() {
      this.dots.forEach((dot, index) => {
        dot.addEventListener('click', () => this.goToSlide(index));

        dot.addEventListener('keydown', (e) => {
          if (e.key === 'ArrowLeft' && index > 0) {
            this.goToSlide(index - 1);
            this.dots[index - 1].focus();
          } else if (e.key === 'ArrowRight' && index < this.dots.length - 1) {
            this.goToSlide(index + 1);
            this.dots[index + 1].focus();
          }
        });
      });

      // Touch/swipe support
      let startX = 0;
      let startY = 0;

      this.carousel?.addEventListener('touchstart', (e) => {
        startX = e.touches[0].clientX;
        startY = e.touches[0].clientY;
      }, { passive: true });

      this.carousel?.addEventListener('touchend', (e) => {
        const endX = e.changedTouches[0].clientX;
        const endY = e.changedTouches[0].clientY;
        const diffX = startX - endX;
        const diffY = startY - endY;

        if (Math.abs(diffX) > Math.abs(diffY) && Math.abs(diffX) > 50) {
          diffX > 0 ? this.nextSlide() : this.prevSlide();
        }
      }, { passive: true });
    }

    goToSlide(index) {
      if (index === this.currentSlide) return;

      // Remove active states
      this.slides[this.currentSlide]?.classList.remove('carousel__slide--active');
      this.slides[this.currentSlide]?.setAttribute('aria-hidden', 'true');
      this.dots[this.currentSlide]?.classList.remove('carousel__dot--active');
      this.dots[this.currentSlide]?.setAttribute('aria-selected', 'false');

      this.currentSlide = index;

      // Add active states
      this.slides[this.currentSlide]?.classList.add('carousel__slide--active');
      this.slides[this.currentSlide]?.setAttribute('aria-hidden', 'false');
      this.dots[this.currentSlide]?.classList.add('carousel__dot--active');
      this.dots[this.currentSlide]?.setAttribute('aria-selected', 'true');

      this.resetAutoAdvance();
    }

    nextSlide() {
      const nextIndex = (this.currentSlide + 1) % this.slides.length;
      this.goToSlide(nextIndex);
    }

    prevSlide() {
      const prevIndex = this.currentSlide === 0 ? this.slides.length - 1 : this.currentSlide - 1;
      this.goToSlide(prevIndex);
    }

    startAutoAdvance() {
      this.clearTimers();
      this.autoAdvanceTimer = setTimeout(() => {
        this.nextSlide();
        this.startAutoAdvance(); // reschedule
      }, autoAdvanceDelay);
    }

    pauseAutoAdvance() {
      this.clearTimers();
    }

    resumeAutoAdvance() {
      this.startAutoAdvance();
    }

    resetAutoAdvance() {
      this.startAutoAdvance();
    }

    clearTimers() {
      clearTimeout(this.autoAdvanceTimer);
      this.autoAdvanceTimer = null;
    }
  }

  // Initialize when DOM is ready
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', () => new HeroCarousel());
  } else {
    new HeroCarousel();
  }
</script>

<style>
  .carousel {
    position: relative;
    height: 100svh;
    overflow: hidden;
  }

  .carousel__slides {
    position: relative;
    width: 100%;
    height: 100%;
  }

.carousel__slide {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  opacity: 0;
  visibility: hidden;
  pointer-events: none;
  transition: opacity 0.8s cubic-bezier(0.4, 0, 0.2, 1);
}

.carousel__slide--active {
  opacity: 1;
  visibility: visible;
  pointer-events: auto;
}

  .carousel__image-container {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
  }

  :global(.carousel__image) {
    width: 100%;
    height: 100%;
    object-fit: cover;
    object-position: center;
    display: block;
  }

  .carousel__controls {
    position: absolute;
    bottom: 2rem;
    left: 50%;
    transform: translateX(-50%);
    z-index: 10;
  }

  .carousel__dots {
    display: flex;
    gap: 2rem;
    align-items: center;
  }

  .carousel__dot {
    width: 6px;
    height: 6px;
    border-radius: 50%;
    background: rgba(255, 255, 255, 0.5);
    border: none;
    cursor: pointer;
    transition: background 0.3s ease;
    position: relative;
  }

  .carousel__dot--active {
    background: white;
  }

  .carousel__dot::after {
    content: "";
    position: absolute;
    inset: -12px;
    border: 1px solid white;
    border-radius: 50%;
    transform: scale(0.8);
    opacity: 0;
    transition: transform 0.5s ease, opacity 0.5s ease;
  }

  .carousel__dot--active::after {
    transform: scale(1);
    opacity: 1;
  }

  .carousel__dot:hover {
    background: rgba(255, 255, 255, 0.8);
  }

  /* Reduced motion support */
  @media (prefers-reduced-motion: reduce) {
    .carousel__slide {
      transition-duration: 0.3s;
    }
  }
</style>