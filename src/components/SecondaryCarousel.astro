---
import { Image } from 'astro:assets';
import CmsImage from '../components/CmsImage.astro';
import rightArrow from '../images/arrow-right.svg';
import leftArrow from '../images/arrow-left.svg';

interface Slide {
  image: string;
  text?: string;
}

interface Props {
  slides: Slide[];
}

const { slides } = Astro.props;
---

<section class="slider">
  <header class="slider__header">
    <div class="slider__controls">
      <button class="slider__btn is-disabled" id="prevBtn">
        <Image src={leftArrow} alt="Previous" width="56" height="28" />
      </button>
      <button class="slider__btn" id="nextBtn">
        <Image src={rightArrow} alt="Next" width="56" height="28" />
      </button>
    </div>
  </header>

  <div class="slider__viewport">
    <div class="slider__track" id="sliderTrack">
      {slides.map((slide) => (
        <div class="slider__slide">
          <div class="slider__media">
            <CmsImage 
              src={slide.image}
              alt="Service Image"
              width={480}
              loading="lazy"
            />
          </div>
          {slide.text && (
            <div class="slider__caption" set:html={slide.text} />
          )}
        </div>
      ))}
    </div>
  </div>
</section>

<style>
.slider {
  padding: 0 2rem;
  max-width: var(--s-page-width);
  margin: 0 auto;
}

.slider__header {
  display: flex;
  justify-content: flex-end;
  align-items: center;
  margin-bottom: 2rem;
}

.slider__controls {
  display: flex;
  gap: 1rem;
}

.slider__btn {
  border: none;
  background: transparent;
  cursor: pointer;
  display: flex;
  align-items: center;
  justify-content: center;
  transition: opacity 0.3s ease;
}

.slider__btn:hover:not(.is-disabled) {
  opacity: 0.6;
}

.slider__btn.is-disabled {
  opacity: 0.3;
  cursor: default;
}

.slider__viewport {
  position: relative;
  overflow: hidden;
}

.slider__track {
  display: flex;
  transition: transform 0.5s ease;
}

.slider__slide {
  flex: 0 0 calc(40% - 1rem);
  display: flex;
  flex-direction: column;
  margin-right: 2rem;
  background: var(--c-c-background);
  overflow: hidden;
}

.slider__media {
  flex: 1;
  height: 400px;
}

:global(.slider__media img) {
  width: 100%;
  height: 100%;
  object-fit: cover;
  display: block;
}

.slider__caption {
  padding: 1rem 0 0 0;
  text-align: left;
}

:global(.slider__caption p) {
  font-size: var(--fs-small);
  line-height: 1.8;
  margin: 0;
}

/* Responsive tweaks */
@media (max-width: 768px) {
  .slider__header {
    justify-content: center;
  }
  .slider__slide {
    flex: 0 0 100%;
    margin-right: 1rem;
  }
}
</style>

<script>
  document.addEventListener("DOMContentLoaded", () => {
    const track = document.getElementById("sliderTrack");
    const prevBtn = document.getElementById("prevBtn");
    const nextBtn = document.getElementById("nextBtn");

    if (!track || !prevBtn || !nextBtn) return;

    let currentIndex = 0;
    const slides = track.querySelectorAll(".slider__slide");

    const getVisibleCount = () => {
      const slideWidth = slides[0].clientWidth;
      const viewportWidth = track.parentElement!.clientWidth;
      return Math.floor(viewportWidth / slideWidth) || 1;
    };

    const updatePosition = () => {
      const slideWidth = slides[0].clientWidth + parseInt(getComputedStyle(slides[0]).marginRight);
      const offset = currentIndex * slideWidth;
      track.style.transform = `translateX(-${offset}px)`;

      // Update button states
      prevBtn.classList.toggle("is-disabled", currentIndex === 0);
      nextBtn.classList.toggle(
        "is-disabled",
        currentIndex >= slides.length - getVisibleCount()
      );
    };

    const goNext = () => {
      if (currentIndex < slides.length - getVisibleCount()) {
        currentIndex++;
        updatePosition();
      }
    };

    const goPrev = () => {
      if (currentIndex > 0) {
        currentIndex--;
        updatePosition();
      }
    };

    nextBtn.addEventListener("click", goNext);
    prevBtn.addEventListener("click", goPrev);

    // Swipe / touch support
    let startX = 0;
    let deltaX = 0;

    track.addEventListener("touchstart", (e) => {
      startX = e.touches[0].clientX;
      deltaX = 0;
    });

    track.addEventListener("touchmove", (e) => {
      deltaX = e.touches[0].clientX - startX;
    });

    track.addEventListener("touchend", () => {
      if (deltaX > 50) {
        goPrev();
      } else if (deltaX < -50) {
        goNext();
      }
    });

    // Reset on resize
    window.addEventListener("resize", () => {
      currentIndex = 0;
      updatePosition();
    });

    // Init
    updatePosition();
  });
</script>
